<?php

			/*
				
					Для работы на удаленном сервере, установки на нем ПО, настройки 
					конфигурационнх файлов, мониторинга процессов и выполнения команд
					может служить протокол SSH (Secure Shall), обеспеивающий полное 
					шифрование трафика.

					Протокол стал стандартом, вытеснив ftp и telnet.

					Проток является клиент-серверным и предполагает, что на хосте,
					к которому нужно получить доступ, установлен SSH-сервер, а на клиенте
					имеется программа, которая обращается к SSH-серверу.


			*/
			
			/*
					
					Для MacOS всей действия аналогичны Ubuntu, за исключеним того,
					что домашняя папка не /home/, а /Users/

					В Windows:
					1) Можно утсановить PuTTY
					2) Можно уст UNIX-окружение Cygwin
					3) Можно воспользовтаться механизмом виртуализации Linux через VirtualBox + Vagrant
			*/
			
			/*
					Установка Ubuntu:
					
					Устанавливаем пакет (после ввода данных нчнется загрузка)
					$ sudo apt-get install opennssh-server
					или (более общий)
					$ sudo apt-get install ssh 
					

					Настройка:

					Файл:  /etc/ssh/sshd_config (! не ssh, а sshd)
					ssh(d) - deamon, резидентная программа, которая висит в памяти.
					ssh    - Клиентская утилита

					$ sudo vim /etc/ssh/sshd_config


					Настройка доступа:

						Существуют два режима доступа по : паролю и ключу.
						Первый режим после установки соединения попросит ввсети пароль.

						1.Режим - по паролю
							Добавить пользователя (параметр - имя пользователя), потом прога попросит здать пароль
							$ sudo adduser USER 

						2. Режим - по ключу. 
								Предполагает регистрацию на сервере открытого ключа в файле  ~/.ssh/authorized_keys (~-дом.каталог. текущ.польз.)
								(Пароль не требуется, только ключ)
								Обычно первый доступ - о паролю, потом сервер подстраивается и становится по ключу

								Разрешить доступ по RSA-ключу:
								RSAAuthentication yes
								PubkeyAuthentication yes

								Задать путь к файлу с открытыми ключами (%h - домашний каталог):
								AuthorizadKaysFile %h/.ssh/authorized_keys (расположение по умолчанию)


						Допустим, есть сервер ssh.soft.ru, на которо развернули OpenSSH-сервер.
						Для того, чтобы предоставить доступ на этот сервер, в домашне каталоге
						пользователя (USER) можно создать подкаталог ssh, и поместить в него 
						файл authorized_keys.
						
						Сделаем это:
						$cat id_rsa.pub >> ~/.ssh/authorized_keys

						Получаем доступ:
						$ ssh USER@ssh.soft.ru

						Попав на сервер, мы будем действовать от имени пользователя USER
						Если файл создастся в домашнем подкаталоге пользователя root:
						$ ssh root@ssh.soft.ru 

						--> Для каждого пользователя необходимо создавать свой authorized_keys файл
								ssh USER@ssh.soft.ru --> /home/USER/.ssh/authorized_keys
						    ssh root@ssh.soft.ru --> /home/root/.ssh/authorized_keys 

					

					За досутп на сервер по паролю отвечает директива PasswordAuthentication.
					Чтобы включить доступ по паролю (yes), для запрета по паролю (no)

					Каждый на сервере сидит под своим логином, возможность логиниться под root
					лучше отключить:
					PermitRootLogin no 

					В случае нужды привилегий суперпользователя, используется команда sudo (su, пароль=root)

			*/

			/* Смена Порта 

					За протоколом закреплен стандартный порт 22.

					В интернете большое количество сканеров, которые пытаюся подобрать
					к серверам пароль, чтобы уменьшить вероятность атаки и шум в журнальных файлах, 
					следует сменить порт.

					Для этого в дериктиве Port (/etc/ssh/sshd_config), передают какое-либо друго значение
						Port 2222 
					
					Если необходимо прослшивать несколько портов, следует их просто перечислить:
						Port 2222 
						Port 1824

			*/

			/* Управление сервером
				
					Запуск:
					$ sudo service ssh start

					Перезапуск:
					$ sudo service ssh restart 

					Перечитать конфиграционный файл без перезагрузки сервера:
					$ sudo service ssh reload

					Отсановка:
					$ sudo service ssh stop 

					Убедиться, что сервер запущен (найти в списке запущенных процессов)
					$ ps aux|grep sshd 
							(sshd)

			*/

			/* Клиент SSH
					
					Обращение к удаленному серверу:
					$ ssh 192.168.0.1 			// Использует имя текущего пользователя
					$ ssh USER@192.168.0.1 	// Явное указание имени (обычно так)

					При подключении в первый раз может попросит подтверждение, 
					после чего соранит его в (~/.ssh/known_hosts)
					В следующий раз, обнаружим клиента в этом файле, SSH сразу уст.соед.

					Если вместо IP-адреса исп доменное имя, и соотв ему IP-адрес меняется,
					ssh сообщит о невозможности установки соединения:
						"Warning: Remote Host Identification Has Changed error and solution"
					В этом случае придется исключить запись из файла:
					$ ssh-keygen -R ssh.soft.ru

					! При вводе пароля символы не отображются в консоле, если пароль введен верно,
						то приет приглашение на сервер.
						Теперь команды будут выполнятся на удаленном сервере.

						
						$ ssh USER@192.168.0.1 uptime

						Если команда содержит пробелы, то слеует заключать ее в кавычки:
						$ ssh USER@192.168.0.1 "ls -la" // Комда выполнится на удаленном сервере, данные вернутся в консоль.

						При порте отличном от стандартного 22, его указывают через -p:
						$ ssh -p 2222 user@192.168.0.1 

			*/

			/* Настройка Клиента SSH
						
					Файл: /etc/ssh/ssh_config 

					Для редактирования трбует root права.

					Обычно для кждого пользователя свой файл, который хранится в домашнем каталоге ( ~/.ssh/config)
					В только установленной системе файл,обычно, отсутствует, создадим:
					$ touch ~/.ssh/config 


					Псевдонимы:
					(Указываются в  ~/.ssh/config )
						Стандартные команды имеют давольно большую длину, им можно присвоить псевдоним:
						Создать псевдонимы node1 и node2 для db00.test.dev и db01.test.dev 
							Host node1 
							Hostname db00.test.dev 
							Port 2222 
							User USER 
							Host node2 
							Hostname db01.test.dev 
							Port 2222 
							User USER 

					Теперь обращаться можно так:
						$ ssh node1    //	Вместо: $ ssh -p 2222 USER@db00.test.dev  
						$ ssh node2 	 // Вместо: $ ssh -p 2222 USER@db01.test.dev  

			*/

			/* Открытый и закртый ключ

					Конфигурациооный файл позволяет задать много параметров, но не пароль,
					поэтому ряд задачь может прерываться вводом пароля, что не желательно.

					Для решения проблемы пребегат к организации доступа по открытому ключу.
					Клиент заводит пару клбчей: Откртый и Закрытый.
						-> Закрытый помещается в домашнем каталоге локального компа: ~/.ssh/id_rsa
						-> Открытый (id_rsa.pub) помещается в конфигурационный файл на сервере,
							 в домашнем каталоге того пользователя, под которым сидит: ~/.ssh/authorized_keys 

					1)Сгенеировать ключ:
						// -t - шифрование (rsa, dsa, edcsa)
						$ ssh-keygen -t rsa 
						-> Во время выполнения команда задаст несколько вопросов:
							 Путь сохранения, по умолчанию .ssh/)
							 Пароль для закрытого ключа (рекомендуется указать)

						В результате команда создаст в домашнем каталоге скрытый каталог .ssh,
						где будут храниться открытый (id_rsa.pub) и закрытый ключ (id_rsa).
						-> Закртый ключ не должен попаать в другие руки и передаваться по незащи-
							 щенным каналам. В идеале - он не долже покидать компьютер.
						-> Открытый ключ может свободно распространяться, можно регистровать его
							 на всех хостах, к которым хотим получить доступ, включая GitHub

					2)Если Ключи существуют:
						Следует самостоятельно создать каталог .ssh (mkdir), скопировать в нее
						ключи и установить на нее доступ тольок для владельца (cmod).:
							$ mkdir .ssh
							$ cp /path/to/keys/id_rsa ~/.ssh/id_rsa
							$ cp /path/to/keys/id_rsa.pub ~/.ssh/id_rsa.pub
							$ chmod 0600 ~/.ssh/id_rsa

						После того как ключи сгенерируются, ключ попадет на сервер и дописывается 
						в конец authorized_keys:
						$cat id_rsa.pub >> ~/.ssh/authorized_keys

						После этого ход будет осущетсвлятся без пароля
					
					3)SSH-АГЕНТ

						Если при создании пары открытого и закртытого ключей был создан пароль, то при каждой
						попытке воспользоваться ключом потребуется его ввод, что может быть утомительным,
						к тому же некоторые операции (особенно в пакетном режиме) не позвляют его вводить.

						Чтобы не вводить парользну фразу каждый раз, ее можноввести один раз в наале
						сеанса, передав на зранение SSH-агенту:
						$ ssh-add 

						Команда запросит пароль. После чего в течении текущего сеанса ввод пароля не потребуется.

			*/

			/*	Проброс Ключа

					Часто, попав на SSH сервер, требуется перейти на другой SSH сервер,
					что может породить цепочки. 
					Это означает, что организация безопасного соедиения потребует закрытый
					ключ на сервере небезопасного, т.к. сервер может быть взломан, а ключ
					похищен.
					
					На хостах, через которые нужно перебросить ключ включают директиву:
						ForwardАgent yes

					После этого закрытый ключ может остаться на SSH-клиенте, а между хостами
					могут выстраиваться связи произвльной длины. (Такие цепочки важны для 
					развертывания, когда код должен копироваться из удаленного репзитория
					на один или несколько серверов)

			*/

			/* Массовое выполнени команд

				 Для выполнения команд стразу на нескольких сервераз следует исп оболочку dsh:
				 $ sudo apt-get install dsh

				 После установки команду нескольким серверам можно передавать через -m :
					$ dsh -m USER@192.168.0.1 -m USER@192.168.0.2 -m USER!192.168.0.3 uptime 

				 После чего можео исп упрощенный синтаксис:
				 $ dsh groups uptime

				 Если в /etc/dsh/machines.list  указать имя groups, то команду можно сократить до:
				 $ dsh uptime 
				
			*/

			/* Загрузка и скачивание файлов

					Для того, чтобы загружать и скачивать файлы с сервера, есть утилита scp
					! scp не копирует скрытые файлы (начинающиеся с точки)
					
					// Копирование из Первого  иточника во второй
					$ scp /path/to/source path/to/destination 

					// Каждый из параметров может принимать путь к удаленному хосту
					// Путь строится по правилу:
					// имя_пользователя@хост:путь_к_файлу
					// Загрузить локальный файл (id_rsa.pub) на сервер
					$ scp id_rsa.pub USER@l92.168.0.1:/home/user/.ssh/id_rsa.pub 

					// Подставив сетевой путь в качетсве первого парамтра источника, ожно скачать файл:
					$ scp USER@l92.168.0.1:.ssh/config config 

					// Загрузка с одного хоста на другой, бе соххранения на текущий:
					$ scp one: .ssh/config two: .ssh/config 

					// Передача папки со всеми вложенными подпапками (-r)
					$ scp -r one: .ssh/dir two: .ssh/dirs


			*/

?>